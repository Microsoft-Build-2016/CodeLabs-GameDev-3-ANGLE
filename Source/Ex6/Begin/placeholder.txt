Ex2 Preparing the Angle Template for your OpenGLES2 game code



1. Right click on the soil project and select properties (ex2-soil-properties.png)

2. Add $(AngleIncPath) to C/C++/General/Additional Include Directories(ex2-soil-angle-include-properties.PNG)
Make sure All Configurations and All Platforms are selecred for Configuration and Platform. Click OK to save your changes.

3. Make sure Debug and x64 are selected for the solution (ex2-debug-x64.png)

4. Press f5 to build and run the solution. It should look like this. (ex2-rotating-cube-white.png)

5. Add the following to Breakout/OpenGLESPage.xaml

<Page
    x:Class="Breakout.OpenGLESPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Breakout"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Background="Black"
    mc:Ignorable="d">

  <SwapChainPanel x:Name="swapChainPanel">
  </SwapChainPanel>
</Page>

Press F5 to run your app. It should now look like this: (ex2-rotating-cube-white.png)


Replace the contents of Breakout/SimpleRenderer.h with the following code

#pragma once

#include "pch.h"
#include "Game.h"
#include "Timer.h"
#include <memory>

namespace Breakout
{
    class SimpleRenderer
    {
    public:
        SimpleRenderer();
        ~SimpleRenderer();
        void Draw();
        void UpdateWindowSize(GLsizei width, GLsizei height);

    private:
        std::shared_ptr<Game> mGame;
        std::unique_ptr<Timer> mTimer;


        GLsizei mWindowWidth;
        GLsizei mWindowHeight;

        int mDrawCount;
    };
}

6. Replace the contents of Breakout/SimpleRenderer.cpp with the following code

//
// This file is used by the template to render a basic scene using GL.
//

#include "pch.h"
#include "SimpleRenderer.h"

using namespace Platform;
using namespace Windows::UI::Core;
using namespace Windows::System;
using namespace Breakout;

SimpleRenderer::SimpleRenderer() :
    mWindowWidth(0),
    mWindowHeight(0),
    mDrawCount(0)
{
}

SimpleRenderer::~SimpleRenderer()
{
}

void SimpleRenderer::Draw()
{
    if (mGame != nullptr)
    {
        float deltaTime = static_cast<float>(mTimer->getDeltaTime());
        mGame->ProcessInput(deltaTime);
        mGame->Update(deltaTime);
        mGame->Render();
    }

    mDrawCount += 1;
}

void SimpleRenderer::UpdateWindowSize(GLsizei width, GLsizei height)
{
    if (mGame == nullptr)
    {
        mGame = std::make_shared<Game>(width, height);
        mGame->Init();
        mTimer.reset(CreateTimer());
        mTimer->start();
    }
}










